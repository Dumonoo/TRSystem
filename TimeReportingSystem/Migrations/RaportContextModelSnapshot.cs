// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeReportingSystem.Models;

namespace TimeReportingSystem.Migrations
{
    [DbContext(typeof(RaportContext))]
    partial class RaportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TimeReportingSystem.Models.Accepted", b =>
                {
                    b.Property<int>("acceptedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("activityId")
                        .HasColumnType("int");

                    b.Property<int>("raportId")
                        .HasColumnType("int");

                    b.Property<int>("time")
                        .HasColumnType("int");

                    b.HasKey("acceptedId");

                    b.HasIndex("activityId");

                    b.HasIndex("raportId");

                    b.ToTable("AcceptedTime");
                });

            modelBuilder.Entity("TimeReportingSystem.Models.Activity", b =>
                {
                    b.Property<int>("activityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("budget")
                        .HasColumnType("int");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("managerId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(90)")
                        .HasMaxLength(90);

                    b.HasKey("activityId");

                    b.HasIndex("managerId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("TimeReportingSystem.Models.Entry", b =>
                {
                    b.Property<int>("entryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("activityId")
                        .HasColumnType("int");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("raportId")
                        .HasColumnType("int");

                    b.Property<int>("subactivityId")
                        .HasColumnType("int");

                    b.Property<int>("time")
                        .HasColumnType("int");

                    b.HasKey("entryId");

                    b.HasIndex("activityId");

                    b.HasIndex("raportId");

                    b.HasIndex("subactivityId");

                    b.ToTable("RaportEntry");
                });

            modelBuilder.Entity("TimeReportingSystem.Models.Raport", b =>
                {
                    b.Property<int>("raportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("frozen")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("month")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("raportId");

                    b.HasIndex("userId");

                    b.ToTable("Raport");
                });

            modelBuilder.Entity("TimeReportingSystem.Models.Subactivity", b =>
                {
                    b.Property<int>("subactivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("activityId")
                        .HasColumnType("int");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("subactivityId");

                    b.HasIndex("activityId");

                    b.ToTable("Subactivity");
                });

            modelBuilder.Entity("TimeReportingSystem.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("userId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TimeReportingSystem.Models.Accepted", b =>
                {
                    b.HasOne("TimeReportingSystem.Models.Activity", "Activity")
                        .WithMany("accepted")
                        .HasForeignKey("activityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeReportingSystem.Models.Raport", "Raport")
                        .WithMany("accepted")
                        .HasForeignKey("raportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeReportingSystem.Models.Activity", b =>
                {
                    b.HasOne("TimeReportingSystem.Models.User", "manager")
                        .WithMany("Activities")
                        .HasForeignKey("managerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeReportingSystem.Models.Entry", b =>
                {
                    b.HasOne("TimeReportingSystem.Models.Activity", "Activity")
                        .WithMany("entries")
                        .HasForeignKey("activityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeReportingSystem.Models.Raport", "Raport")
                        .WithMany("entries")
                        .HasForeignKey("raportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeReportingSystem.Models.Subactivity", "Subactivity")
                        .WithMany()
                        .HasForeignKey("subactivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeReportingSystem.Models.Raport", b =>
                {
                    b.HasOne("TimeReportingSystem.Models.User", "user")
                        .WithMany("Raports")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeReportingSystem.Models.Subactivity", b =>
                {
                    b.HasOne("TimeReportingSystem.Models.Activity", "Activity")
                        .WithMany("subactivities")
                        .HasForeignKey("activityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
